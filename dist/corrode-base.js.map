{"version":3,"sources":["../src/corrode-base.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAM,gBAAgB,QAAQ,kBAAR,CAAtB;AACA,IAAM,aAAa,QAAQ,IAAR,CAAnB;;eACsB,QAAQ,iBAAR,C;;IAAd,S,YAAA,S;;;AAER,OAAO,OAAP;AAAA;;AAAA;AAAA;AAAA,4BAgBc;AACN,mBAAO,KAAK,QAAL,CAAc,KAArB;AACH,SAlBL;AAAA,0BAoBa,GApBb,EAoBiB;AACT,iBAAK,QAAL,CAAc,KAAd,GAAsB,GAAtB;AACH;AAtBL;;AAwBI,yBAAY,OAAZ,EAAoB;AAAA;;AAAA,gHACL,OADK,IACI,YAAY,IADhB,EACsB,UAAU,IADhC;;AAAA,cAvBpB,IAuBoB,GAvBb,EAuBa;AAAA,cAtBpB,QAsBoB,GAtBT,IAAI,aAAJ,EAsBS;AAAA,cArBpB,MAqBoB,GArBX,IAAI,UAAJ,EAqBW;AAAA,cApBpB,YAoBoB,GApBL,CAoBK;AAAA,cAnBpB,WAmBoB,GAnBN,CAmBM;AAAA,cAlBpB,WAkBoB,GAlBN,KAkBM;;;AAGhB,cAAK,OAAL,gBACO,YAAY,QADnB,EAEO,OAFP;;AAKA,YAAG,MAAK,OAAL,CAAa,eAAhB,EAAgC;AAC5B,kBAAK,EAAL,CAAQ,QAAR,EAAoB,MAAK,mBAAzB;AACH;AAVe;AAWnB;;AAnCL;AAAA;AAAA,mCAqCe,KArCf,EAqCsB,QArCtB,EAqCgC,IArChC,EAqCqC;AAC7B,iBAAK,WAAL,GAAmB,CAAnB;;AAEA,iBAAK,MAAL,CAAY,MAAZ,CAAmB,KAAnB;;AAEA,iBAAK,OAAL;;AAEA,wFAAW,IAAX;AACA,iBAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,WAAzB;AACA,mBAAO,MAAP;AACH;AA/CL;AAAA;AAAA,kCAiDa;AAAA;;AAAA;AAED,oBAAI,MAAM,OAAK,IAAL,CAAU,CAAV,CAAV;;AAEA,oBAAG,IAAI,IAAJ,KAAa,MAAhB,EAAuB;AACnB,2BAAK,IAAL,CAAU,KAAV;AACA,2BAAK,QAAL,CAAc,IAAd,CAAmB,IAAI,IAAvB,EAA6B,IAAI,KAAjC;AACA;AAEH,iBALD,MAKO,IAAG,IAAI,IAAJ,KAAa,KAAhB,EAAsB;AACzB,2BAAK,IAAL,CAAU,KAAV;AACA,2BAAK,QAAL,CAAc,GAAd;AACA;AAEH,iBALM,MAKA,IAAG,IAAI,IAAJ,KAAa,KAAhB,EAAsB;AACzB,2BAAK,IAAL,CAAU,KAAV;;AAEA,wBAAI,UAAU,OAAK,SAAL,EAAd;;;AAGA,wBAAG,IAAI,IAAP,EAAY;AACR,+BACK,IADL,CACU,IAAI,IADd,EAEK,GAFL,CAES,IAAI,QAFb,EAEuB,IAAI,IAF3B,EAGK,GAHL;AAKH,qBAND,MAMO;AACH,4BAAI,QAAJ,CAAa,KAAb,SAAyB,IAAI,IAA7B;AACH;;AAED;AACA;AAEH,iBAnBM,MAmBA,IAAG,IAAI,IAAJ,KAAa,MAAhB,EAAuB;AAC1B,wBAAG,IAAI,QAAP,EAAgB;AACZ,+BAAK,IAAL,CAAU,KAAV;AACA;AACH;;AAED,wBAAI,WAAU,OAAK,SAAL,EAAd;;AAEA,wBAAG,IAAI,IAAP,EAAY;AACR,4BAAG,CAAC,OAAK,IAAL,CAAU,IAAI,IAAd,CAAJ,EAAwB;AACpB,mCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,EAAtB;AACH;;AAED,+BACK,GADL,CACS,OAAK,OAAL,CAAa,WADtB,EACmC,IAAI,QADvC,EACiD,CAAC,IAAI,MAAL,EAAa,IAAI,OAAjB,CADjD,EAEK,GAFL,CAES,YAAU;AACX,gCAAG,CAAC,IAAI,SAAR,EAAkB;AACd,qCAAK,IAAL,CAAU,IAAI,IAAd,EAAoB,IAApB,CAAyB,KAAK,IAAL,CAAU,KAAK,OAAL,CAAa,WAAvB,CAAzB;AACH;AACD,gCAAI,SAAJ,GAAgB,KAAhB;AACA,mCAAO,KAAK,IAAL,CAAU,KAAK,OAAL,CAAa,WAAvB,CAAP;AACH,yBARL;AAUH,qBAfD,MAeO;AACH,+BAAK,GAAL,CAAS,IAAI,QAAb,EAAuB,CAAC,IAAI,MAAL,EAAa,IAAI,OAAjB,CAAvB;AACH;;AAED;AACA;AACH;;;AAGD,oBAAI,eAAJ;AACA,oBAAG,OAAO,IAAI,MAAX,KAAsB,QAAzB,EAAkC;AAC9B,6BAAS,OAAK,IAAL,CAAU,IAAI,MAAd,CAAT;AACH,iBAFD,MAEO;AACH,6BAAS,IAAI,MAAb;AACH;;AAED,oBAAI,kBAAkB,OAAK,MAAL,CAAY,MAAZ,GAAqB,OAAK,WAAhD;;AAEA,oBAAG,OAAK,OAAL,CAAa,SAAb,IAA0B,kBAAkB,CAA5C,IAAiD,mBAAmB,MAApE,KAA+E,IAAI,IAAJ,KAAa,MAAb,IAAuB,IAAI,IAAJ,KAAa,QAAnH,CAAH,EAAgI;AAC5H,6BAAS,eAAT;AACH;;;AAGD,oBAAG,OAAK,MAAL,CAAY,MAAZ,GAAqB,OAAK,WAA1B,GAAwC,MAA3C,EAAkD;;AAE9C,wBAAG,OAAK,WAAL,IAAoB,OAAK,IAAL,CAAU,MAAV,GAAmB,CAA1C,EAA4C;AACxC,gCAAQ,GAAR,CAAY,yBAAZ;;AAEA,+BAAK,iBAAL;AACA;AACH;AACD;AACH;;AAED,oBAAG,IAAI,IAAJ,KAAa,MAAhB,EAAuB;AACnB,2BAAK,IAAL,CAAU,KAAV;AACA,2BAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,KAAZ,CAAkB,OAAK,WAAvB,EAAoC,OAAK,WAAL,GAAmB,MAAvD,CAAtB;AACA,2BAAK,UAAL,CAAgB,MAAhB;AACA;AAEH,iBAND,MAMO,IAAG,IAAI,IAAJ,KAAa,QAAhB,EAAyB;AAC5B,2BAAK,IAAL,CAAU,KAAV;AACA,2BAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,QAAZ,CAAqB,IAAI,QAAzB,EAAmC,OAAK,WAAxC,EAAqD,OAAK,WAAL,GAAmB,MAAxE,CAAtB;AACA,2BAAK,UAAL,CAAgB,MAAhB;AACA;AAEH,iBANM,MAMA,IAAG,IAAI,IAAJ,KAAa,MAAhB,EAAuB;AAC1B,2BAAK,IAAL,CAAU,KAAV;AACA,2BAAK,UAAL,CAAgB,MAAhB;AACA;AAEH,iBALM,MAKA;AACH,4BAAQ,IAAI,IAAZ;AACI,6BAAK,QAAL;AAAgB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,QAAZ,CAAqB,OAAK,WAA1B,CAAtB,CAA+D;AAAQ;AACzF,6BAAK,QAAL;AAAgB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,QAAZ,CAAqB,OAAK,WAA1B,CAAtB,CAA+D;AAAQ;AACzF,6BAAK,SAAL;AAAgB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,SAAZ,CAAsB,OAAK,WAA3B,CAAtB,CAA+D;AAAQ;AACzF,6BAAK,SAAL;AAAgB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,SAAZ,CAAsB,OAAK,WAA3B,CAAtB,CAA+D;AAAQ;;AAEzF,6BAAK,SAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,WAAZ,CAAwB,OAAK,WAA7B,CAAtB,CAAkE;AAAQ;AAC7F,6BAAK,SAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,WAAZ,CAAwB,OAAK,WAA7B,CAAtB,CAAkE;AAAQ;AAC7F,6BAAK,UAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAA9B,CAAtB,CAAkE;AAAQ;AAC7F,6BAAK,UAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAA9B,CAAtB,CAAkE;AAAQ;;AAE7F,6BAAK,SAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,WAAZ,CAAwB,OAAK,WAA7B,CAAtB,CAAkE;AAAQ;AAC7F,6BAAK,SAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,WAAZ,CAAwB,OAAK,WAA7B,CAAtB,CAAkE;AAAQ;AAC7F,6BAAK,UAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAA9B,CAAtB,CAAkE;AAAQ;AAC7F,6BAAK,UAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAA9B,CAAtB,CAAkE;AAAQ;;AAE7F,6BAAK,SAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAuB,KAAK,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,OAAK,MAAL,CAAY,WAAZ,CAAwB,OAAK,WAAL,GAAmB,CAA3C,CAAnB,GAAqE,CAAC,OAAK,MAAL,CAAY,OAAK,WAAL,GAAmB,CAA/B,IAAoC,SAAS,IAA7C,GAAoD,CAApD,GAAwD,CAAC,CAA1D,IAA+D,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAA9B,CAA1J,CAAuM;AAAQ;AAClO,6BAAK,SAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAuB,KAAK,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,OAAK,MAAL,CAAY,WAAZ,CAAwB,OAAK,WAA7B,CAAnB,GAAiE,CAAC,OAAK,MAAL,CAAY,OAAK,WAAjB,IAAgC,SAAS,IAAzC,GAAgD,CAAhD,GAAoD,CAAC,CAAtD,IAA2D,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAAL,GAAmB,CAA5C,CAAlJ,CAAmM;AAAQ;AAC9N,6BAAK,UAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAuB,KAAK,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAAL,GAAmB,CAA5C,CAAnB,GAAqE,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAA9B,CAA3F,CAAuI;AAAQ;AAClK,6BAAK,UAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAuB,KAAK,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAA9B,CAAnB,GAAiE,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAAL,GAAmB,CAA5C,CAAvF,CAAuI;AAAQ;;AAElK,6BAAK,SAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,WAAZ,CAAwB,OAAK,WAA7B,CAAtB,CAAkE;AAAQ;AAC7F,6BAAK,SAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,WAAZ,CAAwB,OAAK,WAA7B,CAAtB,CAAkE;AAAQ;;AAE7F,6BAAK,UAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAA9B,CAAtB,CAAkE;AAAQ;AAC7F,6BAAK,UAAL;AAAiB;AAAE,uCAAK,IAAL,CAAU,IAAI,IAAd,IAAsB,OAAK,MAAL,CAAY,YAAZ,CAAyB,OAAK,WAA9B,CAAtB,CAAkE;AAAQ;AAC7F;AAAS;AAAE;AAAA,uCAAO,KAAK,IAAI,KAAJ,uBAA8B,IAAI,IAAlC,CAAL;AAAP;AAAyD;AA1BxE;;AA6BA,2BAAK,IAAL,CAAU,KAAV;AACA,2BAAK,UAAL,CAAgB,MAAhB;AACH;AA3IA;;AAAA,oBACL,OAAM,KAAK,IAAL,CAAU,MAAV,GAAmB,CAAzB,EAA2B;AAAA;;AAAA;AAAA;AAwGnB;;AAxGmB;AAsFnB;;AAtFmB;AAAA;AAAA;AA2I1B;AACJ;AA9LL;AAAA;AAAA,8CAgMyB;AACjB,iBAAK,WAAL,GAAmB,IAAnB;AACA,iBAAK,iBAAL;AACA,iBAAK,OAAL;AACH;;;;;;AApML;AAAA;AAAA,4CAyMuB;AAAA;;AACf,gBAAI,eAAe,KAAK,IAAL,CACd,KADc,GAEd,MAFc,CAEP;AAAA,uBAAO,IAAI,IAAJ,KAAa,KAAb,IAAuB,IAAI,IAAJ,KAAa,KAAb,IAAsB,CAAC,IAAI,IAAzD;AAAA,aAFO,CAAnB;;AAIA,iBAAK,IAAL,CAAU,MAAV,CAAiB,CAAjB;AACA,0BAAK,IAAL,EAAU,IAAV,iCAAkB,YAAlB;AACH;AAhNL;AAAA;AAAA,mCAkNe,EAlNf,EAkNkB;AACV,iBAAK,WAAL,IAAoB,EAApB;AACA,iBAAK,YAAL,IAAqB,EAArB;AACH;AArNL;AAAA;AAAA,gCAuNY,IAvNZ,EAuNkB,IAvNlB,EAuNwB,MAvNxB,EAuNgC,OAvNhC,EAuNwC;AAChC,iBAAK,IAAL,CAAU,IAAV,YAAiB,UAAjB,EAAuB,UAAvB,EAA6B,cAA7B,IAAwC,OAAxC;AACA,mBAAO,IAAP;AACH;AA1NL;AAAA;AAAA,oCA4Ne;AAAA;;AACP,gBAAI,aAAa,KAAK,IAAL,CAAU,KAAV,EAAjB;;AAEA,iBAAK,IAAL,CAAU,MAAV,CAAiB,CAAjB;;;AAGA,mBAAO;AAAA;;AAAA,uBAAM,iBAAK,IAAL,EAAU,IAAV,kCAAkB,UAAlB,EAAN;AAAA,aAAP;AACH;AAnOL;AAAA;AAAA,4BAqOQ,IArOR,EAqOc,QArOd,EAqOwB,IArOxB,EAqO6B;AACrB,gBAAG,OAAO,IAAP,KAAgB,UAAnB,EAA8B;AAC1B,uBAAO,QAAP;AACA,2BAAW,IAAX;AACA,uBAAO,SAAP;AACH;;AAED,iBAAK,IAAL,CAAU,IAAV,CAAe;AACX,0BADW;AAEX,sBAAM,KAFK;AAGX,0BAHW;AAIX;AAJW,aAAf;AAMA,mBAAO,IAAP;AACH;AAnPL;AAAA;AAAA,6BAqPS,IArPT,EAqPe,QArPf,EAqPwB;AAChB,gBAAG,OAAO,IAAP,KAAgB,UAAnB,EAA8B;AAC1B,2BAAW,IAAX;AACA,uBAAO,SAAP;AACH;;AAED,gBAAI,UAAU;AACV,0BADU;AAEV,sBAAM,MAFI;AAGV,kCAHU;AAIV,0BAAU,KAJA;AAKV,2BAAW;AALD,aAAd;;AAQA,oBAAQ,MAAR,GAAiB,UAAS,OAAT,EAAiB;AAC9B,wBAAQ,QAAR,GAAmB,IAAnB;AACA,wBAAQ,SAAR,GAAoB,CAAC,CAAC,OAAtB;AACH,aAHD;;AAKA,oBAAQ,OAAR,GAAkB,YAAU;AACxB,wBAAQ,SAAR,GAAoB,IAApB;AACH,aAFD;;AAIA,iBAAK,IAAL,CAAU,IAAV,CAAe,OAAf;AACA,mBAAO,IAAP;AACH;AA9QL;AAAA;AAAA,6BAgRS,MAhRT,EAgRgB;AACR,iBAAK,IAAL,CAAU,IAAV,CAAe;AACX,sBAAM,MADK;AAEX;AAFW,aAAf;AAIA,mBAAO,IAAP;AACH;AAtRL;AAAA;AAAA,8BAwRS;AACD,iBAAK,IAAL,CAAU,IAAV,CAAe;AACX,sBAAM;AADK,aAAf;AAGA,mBAAO,IAAP;AACH;AA7RL;AAAA;AAAA,6BA+RS,IA/RT,EA+Re,KA/Rf,EA+RqB;AACb,iBAAK,IAAL,CAAU,IAAV,CAAe;AACX,sBAAM,MADK;AAEX,0BAFW;AAGX;AAHW,aAAf;AAKA,mBAAO,IAAP;AACH;AAtSL;AAAA;AAAA,6BAwSS,IAxST,EAwSe,MAxSf,EAwSsB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,MAAnB,EAA2B,MAA3B,CAAP;AAA4C;AAxSpE;AAAA;AAAA,+BAySW,IAzSX,EAySiB,MAzSjB,EAyS0D;AAAA,gBAAjC,QAAiC,yDAAtB,KAAK,OAAL,CAAa,QAAS;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,QAAnB,EAA6B,MAA7B,EAAqC,EAAE,kBAAF,EAArC,CAAP;AAA4D;AAzSxH;AAAA;AAAA,6BA2SS,IA3ST,EA2Sc;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,SAAS,KAAK,OAAL,CAAa,UAAzC,EAAqD,CAArD,CAAP;AAAiE;AA3SjF;AAAA;AAAA,+BA4SW,IA5SX,EA4SgB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,QAAnB,EAA6B,CAA7B,CAAP;AAAyC;AA5S3D;AAAA;AAAA,+BA6SW,IA7SX,EA6SgB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,QAAnB,EAA6B,CAA7B,CAAP;AAAyC;AA7S3D;AAAA;AAAA,8BA8SU,IA9SV,EA8Se;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAU,KAAK,OAAL,CAAa,UAA1C,EAAsD,CAAtD,CAAP;AAAkE;AA9SnF;AAAA;AAAA,gCA+SY,IA/SZ,EA+SiB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,SAAnB,EAA8B,CAA9B,CAAP;AAA0C;AA/S7D;AAAA;AAAA,gCAgTY,IAhTZ,EAgTiB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,SAAnB,EAA8B,CAA9B,CAAP;AAA0C;AAhT7D;AAAA;AAAA,8BAkTU,IAlTV,EAkTe;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAU,KAAK,OAAL,CAAa,UAA1C,EAAsD,CAAtD,CAAP;AAAkE;AAlTnF;AAAA;AAAA,gCAmTY,IAnTZ,EAmTiB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,SAAnB,EAA8B,CAA9B,CAAP;AAA0C;AAnT7D;AAAA;AAAA,gCAoTY,IApTZ,EAoTiB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,SAAnB,EAA8B,CAA9B,CAAP;AAA0C;AApT7D;AAAA;AAAA,+BAqTW,IArTX,EAqTgB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,WAAW,KAAK,OAAL,CAAa,UAA3C,EAAuD,CAAvD,CAAP;AAAmE;AArTrF;AAAA;AAAA,iCAsTa,IAtTb,EAsTkB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAnB,EAA+B,CAA/B,CAAP;AAA2C;AAtT/D;AAAA;AAAA,iCAuTa,IAvTb,EAuTkB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAnB,EAA+B,CAA/B,CAAP;AAA2C;AAvT/D;AAAA;AAAA,8BAyTU,IAzTV,EAyTe;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAU,KAAK,OAAL,CAAa,UAA1C,EAAsD,CAAtD,CAAP;AAAkE;AAzTnF;AAAA;AAAA,gCA0TY,IA1TZ,EA0TiB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,SAAnB,EAA8B,CAA9B,CAAP;AAA0C;AA1T7D;AAAA;AAAA,gCA2TY,IA3TZ,EA2TiB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,SAAnB,EAA8B,CAA9B,CAAP;AAA0C;AA3T7D;AAAA;AAAA,+BA4TW,IA5TX,EA4TgB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,WAAW,KAAK,OAAL,CAAa,UAA3C,EAAuD,CAAvD,CAAP;AAAmE;AA5TrF;AAAA;AAAA,iCA6Ta,IA7Tb,EA6TkB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAnB,EAA+B,CAA/B,CAAP;AAA2C;AA7T/D;AAAA;AAAA,iCA8Ta,IA9Tb,EA8TkB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAnB,EAA+B,CAA/B,CAAP;AAA2C;AA9T/D;AAAA;AAAA,8BAgUU,IAhUV,EAgUe;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAU,KAAK,OAAL,CAAa,UAA1C,EAAsD,CAAtD,CAAP;AAAkE;AAhUnF;AAAA;AAAA,gCAiUY,IAjUZ,EAiUiB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,SAAnB,EAA8B,CAA9B,CAAP;AAA0C;AAjU7D;AAAA;AAAA,gCAkUY,IAlUZ,EAkUiB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,SAAnB,EAA8B,CAA9B,CAAP;AAA0C;AAlU7D;AAAA;AAAA,+BAmUW,IAnUX,EAmUgB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,WAAW,KAAK,OAAL,CAAa,UAA3C,EAAuD,CAAvD,CAAP;AAAmE;AAnUrF;AAAA;AAAA,iCAoUa,IApUb,EAoUkB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAnB,EAA+B,CAA/B,CAAP;AAA2C;AApU/D;AAAA;AAAA,iCAqUa,IArUb,EAqUkB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAnB,EAA+B,CAA/B,CAAP;AAA2C;AArU/D;AAAA;AAAA,8BAuUU,IAvUV,EAuUe;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAU,KAAK,OAAL,CAAa,UAA1C,EAAsD,CAAtD,CAAP;AAAkE;AAvUnF;AAAA;AAAA,gCAwUY,IAxUZ,EAwUiB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,SAAnB,EAA8B,CAA9B,CAAP;AAA0C;AAxU7D;AAAA;AAAA,gCAyUY,IAzUZ,EAyUiB;AAAE,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,SAAnB,EAA8B,CAA9B,CAAP;AAA0C;AAzU7D;AAAA;AAAA,+BA2UW,IA3UX,EA2UgB;AAAC,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,WAAW,KAAK,OAAL,CAAa,UAA3C,EAAuD,CAAvD,CAAP;AAAmE;AA3UpF;AAAA;AAAA,iCA4Ua,IA5Ub,EA4UkB;AAAC,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAnB,EAA+B,CAA/B,CAAP;AAA2C;AA5U9D;AAAA;AAAA,iCA6Ua,IA7Ub,EA6UkB;AAAC,mBAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,UAAnB,EAA+B,CAA/B,CAAP;AAA2C;AA7U9D;;AAAA;AAAA,EAA2C,SAA3C,UAQW,QARX,GAQsB;AACd,gBAAY,IADE;AAEd,iBAAa,YAFC;AAGd,cAAU,MAHI;AAId,eAAW,KAJG;AAKd,qBAAiB;AALH,CARtB","file":"corrode-base.js","sourcesContent":["const VariableStack = require('./variable-stack');\nconst BufferList = require('bl');\nconst { Transform } = require('readable-stream');\n\nmodule.exports = class CorrodeBase extends Transform {\n    jobs = [];\n    varStack = new VariableStack();\n    buffer = new BufferList();\n    streamOffset = 0;\n    chunkOffset = 0;\n    isUnwinding = false;\n\n    static defaults = {\n        endianness: 'le',\n        loopVarName: '__loop_tmp',\n        encoding: 'utf8',\n        wrapOnEOC: false,\n        finishJobsOnEOF: true\n    };\n\n    get vars(){\n        return this.varStack.value;\n    }\n\n    set vars(val){\n        this.varStack.value = val;\n    }\n\n    constructor(options){\n        super({ ...options, objectMode: true, encoding: null });\n\n        this.options = {\n            ...CorrodeBase.defaults,\n            ...options\n        };\n\n        if(this.options.finishJobsOnEOF){\n            this.on('finish', ::this.finishRemainingJobs);\n        }\n    }\n\n    _transform(chunk, encoding, done){\n        this.chunkOffset = 0;\n\n        this.buffer.append(chunk);\n\n        this.jobLoop();\n\n        super.push(null);\n        this.buffer.consume(this.chunkOffset);\n        return done();\n    }\n\n    jobLoop(){\n        while(this.jobs.length > 0){\n            let job = this.jobs[0];\n\n            if(job.type === 'push'){\n                this.jobs.shift();\n                this.varStack.push(job.name, job.value);\n                continue;\n\n            } else if(job.type === 'pop'){\n                this.jobs.shift();\n                this.varStack.pop();\n                continue;\n\n            } else if(job.type === 'tap'){\n                this.jobs.shift();\n\n                let unqueue = this.queueJobs();\n\n                // if the tap has a name, we push a new var-layer\n                if(job.name){\n                    this\n                        .push(job.name)\n                        .tap(job.callback, job.args)\n                        .pop()\n\n                } else {\n                    job.callback.apply(this, job.args);\n                }\n\n                unqueue();\n                continue;\n\n            } else if(job.type === 'loop'){\n                if(job.finished){\n                    this.jobs.shift();\n                    continue;\n                }\n\n                let unqueue = this.queueJobs();\n\n                if(job.name){\n                    if(!this.vars[job.name]){\n                        this.vars[job.name] = [];\n                    }\n\n                    this\n                        .tap(this.options.loopVarName, job.callback, [job.finish, job.discard])\n                        .tap(function(){\n                            if(!job.discarded){\n                                this.vars[job.name].push(this.vars[this.options.loopVarName]);\n                            }\n                            job.discarded = false;\n                            delete this.vars[this.options.loopVarName];\n                        });\n\n                } else {\n                    this.tap(job.callback, [job.finish, job.discard]);\n                }\n\n                unqueue();\n                continue;\n            }\n\n            // determine length of next job\n            let length;\n            if(typeof job.length === 'string'){\n                length = this.vars[job.length];\n            } else {\n                length = job.length;\n            }\n\n            let remainingBuffer = this.buffer.length - this.chunkOffset;\n\n            if(this.options.wrapOnEOC && remainingBuffer > 0 && remainingBuffer <= length && (job.type === 'blob' || job.type === 'string')){\n                length = remainingBuffer;\n            }\n\n            // break on end of buffer (wait if we're not unwinding yet)\n            if(this.buffer.length - this.chunkOffset < length){\n\n                if(this.isUnwinding && this.jobs.length > 0){\n                    console.log('isUnwinding & bufferend');\n                    // unwind loop, by removing the loop job\n                    this.filterNonReadJobs();\n                    continue;\n                }\n                break;\n            }\n\n            if(job.type === 'blob'){\n                this.jobs.shift();\n                this.vars[job.name] = this.buffer.slice(this.chunkOffset, this.chunkOffset + length);\n                this.moveOffset(length);\n                continue;\n\n            } else if(job.type === 'string'){\n                this.jobs.shift();\n                this.vars[job.name] = this.buffer.toString(job.encoding, this.chunkOffset, this.chunkOffset + length);\n                this.moveOffset(length);\n                continue;\n\n            } else if(job.type === 'skip'){\n                this.jobs.shift();\n                this.moveOffset(length);\n                continue;\n\n            } else {\n                switch (job.type) {\n                    case \"int8le\":  { this.vars[job.name] = this.buffer.readInt8(this.chunkOffset);  break; }\n                    case \"int8be\":  { this.vars[job.name] = this.buffer.readInt8(this.chunkOffset);  break; }\n                    case \"uint8le\": { this.vars[job.name] = this.buffer.readUInt8(this.chunkOffset); break; }\n                    case \"uint8be\": { this.vars[job.name] = this.buffer.readUInt8(this.chunkOffset); break; }\n\n                    case \"int16le\":  { this.vars[job.name] = this.buffer.readInt16LE(this.chunkOffset);  break; }\n                    case \"int16be\":  { this.vars[job.name] = this.buffer.readInt16BE(this.chunkOffset);  break; }\n                    case \"uint16le\": { this.vars[job.name] = this.buffer.readUInt16LE(this.chunkOffset); break; }\n                    case \"uint16be\": { this.vars[job.name] = this.buffer.readUInt16BE(this.chunkOffset); break; }\n\n                    case \"int32le\":  { this.vars[job.name] = this.buffer.readInt32LE(this.chunkOffset);  break; }\n                    case \"int32be\":  { this.vars[job.name] = this.buffer.readInt32BE(this.chunkOffset);  break; }\n                    case \"uint32le\": { this.vars[job.name] = this.buffer.readUInt32LE(this.chunkOffset); break; }\n                    case \"uint32be\": { this.vars[job.name] = this.buffer.readUInt32BE(this.chunkOffset); break; }\n\n                    case \"int64le\":  { this.vars[job.name] = (Math.pow(2, 32) * this.buffer.readInt32LE(this.chunkOffset + 4)) + ((this.buffer[this.chunkOffset + 4] & 0x80 === 0x80 ? 1 : -1) * this.buffer.readUInt32LE(this.chunkOffset)); break; }\n                    case \"int64be\":  { this.vars[job.name] = (Math.pow(2, 32) * this.buffer.readInt32BE(this.chunkOffset)) + ((this.buffer[this.chunkOffset] & 0x80 === 0x80 ? 1 : -1) * this.buffer.readUInt32BE(this.chunkOffset + 4)); break; }\n                    case \"uint64le\": { this.vars[job.name] = (Math.pow(2, 32) * this.buffer.readUInt32LE(this.chunkOffset + 4)) + this.buffer.readUInt32LE(this.chunkOffset); break; }\n                    case \"uint64be\": { this.vars[job.name] = (Math.pow(2, 32) * this.buffer.readUInt32BE(this.chunkOffset)) + this.buffer.readUInt32BE(this.chunkOffset + 4); break; }\n\n                    case \"floatle\":  { this.vars[job.name] = this.buffer.readFloatLE(this.chunkOffset);  break; }\n                    case \"floatbe\":  { this.vars[job.name] = this.buffer.readFloatBE(this.chunkOffset);  break; }\n\n                    case \"doublele\": { this.vars[job.name] = this.buffer.readDoubleLE(this.chunkOffset); break; }\n                    case \"doublebe\": { this.vars[job.name] = this.buffer.readDoubleBE(this.chunkOffset); break; }\n                    default: { return done(new Error(`invalid job type ${job.type}`)); }\n                }\n\n                this.jobs.shift();\n                this.moveOffset(length);\n            }\n        }\n    }\n\n    finishRemainingJobs(){\n        this.isUnwinding = true;\n        this.filterNonReadJobs();\n        this.jobLoop();\n    }\n\n    /**\n     * purges all jobs from the job-queue, which need to read from the stream\n     */\n    filterNonReadJobs(){\n        let filteredJobs = this.jobs\n            .slice()\n            .filter(job => job.type === 'pop' || (job.type === 'tap' && !job.name));\n\n        this.jobs.splice(0);\n        this.jobs.push(...filteredJobs);\n    }\n\n    moveOffset(by){\n        this.chunkOffset += by;\n        this.streamOffset += by;\n    }\n\n    pushJob(name, type, length, options){\n        this.jobs.push({ name, type, length, ...options });\n        return this;\n    }\n\n    queueJobs(){\n        let queuedJobs = this.jobs.slice();\n        // empty jobs\n        this.jobs.splice(0);\n\n        // unqueue-method\n        return () => this.jobs.push(...queuedJobs);\n    }\n\n    tap(name, callback, args){\n        if(typeof name === 'function'){\n            args = callback;\n            callback = name;\n            name = undefined;\n        }\n\n        this.jobs.push({\n            name,\n            type: 'tap',\n            args,\n            callback\n        });\n        return this;\n    }\n\n    loop(name, callback){\n        if(typeof name === 'function'){\n            callback = name;\n            name = undefined;\n        }\n\n        let loopJob = {\n            name,\n            type: 'loop',\n            callback,\n            finished: false,\n            discarded: false\n        };\n\n        loopJob.finish = function(discard){\n            loopJob.finished = true;\n            loopJob.discarded = !!discard;\n        }\n\n        loopJob.discard = function(){\n            loopJob.discarded = true;\n        }\n\n        this.jobs.push(loopJob);\n        return this;\n    }\n\n    skip(length){\n        this.jobs.push({\n            type: 'skip',\n            length\n        });\n        return this;\n    }\n\n    pop(){\n        this.jobs.push({\n            type: 'pop'\n        });\n        return this;\n    }\n\n    push(name, value){\n        this.jobs.push({\n            type: 'push',\n            name,\n            value\n        });\n        return this;\n    }\n\n    blob(name, length){ return this.pushJob(name, 'blob', length); }\n    string(name, length, encoding = this.options.encoding){ return this.pushJob(name, 'string', length, { encoding }); }\n\n    int8(name){ return this.pushJob(name, 'int8' + this.options.endianness, 1); }\n    int8le(name){ return this.pushJob(name, 'int8le', 1); }\n    int8be(name){ return this.pushJob(name, 'int8be', 1); }\n    uint8(name){ return this.pushJob(name, 'uint8' + this.options.endianness, 1); }\n    uint8le(name){ return this.pushJob(name, 'uint8le', 1); }\n    uint8be(name){ return this.pushJob(name, 'uint8be', 1); }\n\n    int16(name){ return this.pushJob(name, 'int16' + this.options.endianness, 2); }\n    int16le(name){ return this.pushJob(name, 'int16le', 2); }\n    int16be(name){ return this.pushJob(name, 'int16be', 2); }\n    uint16(name){ return this.pushJob(name, 'uint16' + this.options.endianness, 2); }\n    uint16le(name){ return this.pushJob(name, 'uint16le', 2); }\n    uint16be(name){ return this.pushJob(name, 'uint16be', 2); }\n\n    int32(name){ return this.pushJob(name, 'int32' + this.options.endianness, 4); }\n    int32le(name){ return this.pushJob(name, 'int32le', 4); }\n    int32be(name){ return this.pushJob(name, 'int32be', 4); }\n    uint32(name){ return this.pushJob(name, 'uint32' + this.options.endianness, 4); }\n    uint32le(name){ return this.pushJob(name, 'uint32le', 4); }\n    uint32be(name){ return this.pushJob(name, 'uint32be', 4); }\n\n    int64(name){ return this.pushJob(name, 'int64' + this.options.endianness, 8); }\n    int64le(name){ return this.pushJob(name, 'int64le', 8); }\n    int64be(name){ return this.pushJob(name, 'int64be', 8); }\n    uint64(name){ return this.pushJob(name, 'uint64' + this.options.endianness, 8); }\n    uint64le(name){ return this.pushJob(name, 'uint64le', 8); }\n    uint64be(name){ return this.pushJob(name, 'uint64be', 8); }\n\n    float(name){ return this.pushJob(name, 'float' + this.options.endianness, 4); }\n    floatle(name){ return this.pushJob(name, 'floatle', 4); }\n    floatbe(name){ return this.pushJob(name, 'floatbe', 4); }\n\n    double(name){return this.pushJob(name, 'double' + this.options.endianness, 8); }\n    doublele(name){return this.pushJob(name, 'doublele', 8); }\n    doublebe(name){return this.pushJob(name, 'doublebe', 8); }\n}\n"]}