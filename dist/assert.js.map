{"version":3,"sources":["../src/assert.js"],"names":[],"mappings":";;AAAA,IAAM,SAAS,QAAQ,QAAR,CAAf;;AAEA,OAAO,OAAP,GAAiB;;;;;;;;;AAQb,SARa,iBAQP,IARO,EAQD,KARC,EAQK;AACd,YAAG,KAAK,IAAL,CAAU,IAAV,MAAoB,KAAvB,EAA6B;AACzB,kBAAM,IAAI,SAAJ,eAA0B,KAA1B,gBAA0C,KAAK,IAAL,CAAU,IAAV,CAA1C,YAAgE,IAAhE,CAAN;AACH;AACJ,KAZY;;;;;;;;;AAoBb,kBApBa,0BAoBE,IApBF,EAoBQ,KApBR,EAoBc;AACvB,YAAM,kBAAkB,OAAO,MAAP,CAAc,KAAK,IAAL,CAAU,IAAV,CAAd,EAA+B,MAA/B,CAAsC;AAAA,mBAAY,aAAa,KAAzB;AAAA,SAAtC,CAAxB;AACA,YAAG,gBAAgB,MAAhB,KAA2B,CAA9B,EAAgC;AAC5B,kBAAM,IAAI,SAAJ,yBAAoC,KAAK,SAAL,CAAe,KAAK,IAAL,CAAU,IAAV,CAAf,CAApC,mBAAiF,KAAjF,CAAN;AACH;AACJ,KAzBY;;;;;;;;;AAiCb,mBAjCa,2BAiCG,IAjCH,EAiCS,KAjCT,EAiCe;AACxB,YAAM,cAAc,KAAK,IAAL,CAAU,IAAV,CAApB;AACA,YAAG,CAAC,OAAO,OAAP,CAAe,WAAf,EAA4B,KAA5B,CAAJ,EAAuC;AACnC,kBAAM,IAAI,SAAJ,eAA0B,KAAK,SAAL,CAAe,KAAf,CAA1B,gBAA0D,KAAK,SAAL,CAAe,WAAf,CAA1D,CAAN;AACH;AACJ,KAtCY;;;;;;;;;AA8Cb,WA9Ca,mBA8CL,IA9CK,EA8CC,GA9CD,EA8CK;AACd,YAAG,CAAC,OAAO,QAAP,CAAgB,GAAhB,EAAqB,KAAK,IAAL,CAAU,IAAV,CAArB,CAAJ,EAA0C;AACtC,kBAAM,IAAI,SAAJ,eAA0B,KAAK,SAAL,CAAe,GAAf,CAA1B,oBAA4D,KAAK,IAAL,CAAU,IAAV,CAA5D,CAAN;AACH;AACJ,KAlDY;;;;;;;;;AA0Db,iBA1Da,yBA0DC,IA1DD,EA0DO,KA1DP,EA0Da;AACtB,YAAM,QAAQ,KAAK,IAAL,CAAU,IAAV,CAAd;;AAEA,YAAG,QAAQ,CAAR,IAAa,SAAS,MAAM,MAA/B,EAAsC;AAClC,kBAAM,IAAI,SAAJ,wBAAmC,MAAM,MAAzC,8BAAwE,KAAK,IAAL,CAAU,IAAV,CAAxE,WAAN;AACH;AACJ,KAhEY;;;;;;;;;;AAyEb,YAzEa,oBAyEJ,IAzEI,EAyEE,EAzEF,EAyEuB;AAAA,YAAjB,MAAiB,yDAAR,GAAG,IAAK;;AAChC,YAAG,CAAC,GAAG,KAAK,IAAL,CAAU,IAAV,CAAH,CAAJ,EAAwB;AACpB,kBAAM,IAAI,SAAJ,yBAAoC,MAApC,SAA8C,KAAK,IAAL,CAAU,IAAV,CAA9C,OAAN;AACH;AACJ,KA7EY;;;;;;;;;AAqFb,eArFa,uBAqFD,IArFC,EAqFK,MArFL,EAqFY;AACrB,YAAG,OAAO,KAAK,IAAL,CAAU,IAAV,CAAP,KAA2B,WAA3B,IAA0C,KAAK,IAAL,CAAU,IAAV,EAAgB,MAAhB,KAA2B,MAAxE,EAA+E;AAC3E,kBAAM,IAAI,SAAJ,yCAAoD,MAApD,cAAmE,KAAK,IAAL,CAAU,IAAV,EAAgB,MAAnF,CAAN;AACH;AACJ,KAzFY;;;;;;;;AAgGb,UAhGa,kBAgGN,IAhGM,EAgGD;AACR,YAAG,OAAO,KAAK,IAAL,CAAU,IAAV,CAAP,KAA2B,WAA9B,EAA0C;AACtC,kBAAM,IAAI,SAAJ,mBAA8B,IAA9B,eAAN;AACH;AACJ;AApGY,CAAjB","file":"assert.js","sourcesContent":["const lodash = require('lodash');\n\nmodule.exports = {\n\n    /**\n     * assert strict equal single value\n     * @param {string} name   key of the value to test\n     * @param {mixed}  value  comparision\n     * @throws TypeError assertion-error\n     */\n    equal(name, value){\n        if(this.vars[name] !== value){\n            throw new TypeError(`Expected ${value}, found ${this.vars[name]} at ${name}`);\n        }\n    },\n\n    /**\n     * assert deep equal each value in Object\n     * @param {string} name  key of the object to test\n     * @param {mixed} value comparision\n     * @throws TypeError assertion-error\n     */\n    allEqualObject(name, value){\n        const notEqualObjects = lodash.values(this.vars[name]).filter(varValue => varValue !== value);\n        if(notEqualObjects.length !== 0){\n            throw new TypeError(`Expected values in ${JSON.stringify(this.vars[name])} to all be ${value}`);\n        }\n    },\n\n    /**\n     * assert equal objects\n     * @param {string} name  key of the object to test\n     * @param {object} value comparision\n     * @throws TypeError assertion-error\n     */\n    deepEqualObject(name, value){\n        const binaryValue = this.vars[name];\n        if(!lodash.isEqual(binaryValue, value)){\n            throw new TypeError(`Expected ${JSON.stringify(value)}, found ${JSON.stringify(binaryValue)}`);\n        }\n    },\n\n    /**\n     * assert array to contain item\n     * @param {string} name key of the value to test\n     * @param {array} arr   comparision\n     * @throws TypeError assertion-error\n     */\n    inArray(name, arr){\n        if(!lodash.includes(arr, this.vars[name])){\n            throw new TypeError(`Expected ${JSON.stringify(arr)} to include ${this.vars[name]}`);\n        }\n    },\n\n    /**\n     * assert value to be within the bounds of an array\n     * @param {string} name  key of the number to test\n     * @param {array} value comparision\n     * @throws TypeError assertion-error\n     */\n    inArrayBounds(name, value){\n        const index = this.vars[name];\n\n        if(index < 0 || index >= value.length){\n            throw new TypeError(`Expected Array of ${value.length} items to be at least ${this.vars[name]} long`);\n        }\n    },\n\n    /**\n     * assert value via callback\n     * @param {string}   name   key of the value to test\n     * @param {function} value  comparator\n     * @param {string}   fnName optional test-name\n     * @throws TypeError assertion-error\n     */\n    callback(name, fn, fnName = fn.name){\n        if(!fn(this.vars[name])){\n            throw new TypeError(`Callback failed at ${fnName}(${this.vars[name]})`);\n        }\n    },\n\n    /**\n     * assert array to be a given length\n     * @param {string}   name   key of the value to test\n     * @param {number} length comparision\n     * @throws TypeError assertion-error\n     */\n    arrayLength(name, length){\n        if(typeof this.vars[name] === 'undefined' || this.vars[name].length !== length){\n            throw new TypeError(`Expected array to have a length of ${length}, has ${this.vars[name].length}`);\n        }\n    },\n\n    /**\n     * asserts a variable exists in the first place\n     * @param {string}   name   key of the value to test\n     * @throws TypeError assertion-error\n     */\n    exists(name){\n        if(typeof this.vars[name] === 'undefined'){\n            throw new TypeError(`Expected var ${name} to exist`);\n        }\n    }\n};\n"]}