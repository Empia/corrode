{"version":3,"sources":["../src/assert.js"],"names":[],"mappings":";;AAAA,IAAM,IAAI,QAAQ,SAAR,CAAV;AACA,IAAM,SAAS,QAAQ,QAAR,CAAf;AACA,IAAM,QAAQ,QAAQ,SAAR,CAAd;;AAEA,OAAO,OAAP,GAAiB;;;;;;;;;AAQb,SARa,iBAQP,IARO,EAQD,KARC,EAQK;AACd,YAAG,KAAK,IAAL,CAAU,IAAV,MAAoB,KAAvB,EACI,MAAM,IAAI,SAAJ,eAA0B,KAA1B,gBAA0C,KAAK,IAAL,CAAU,IAAV,CAA1C,YAAgE,IAAhE,CAAN;AACP,KAXY;;;;;;;;;AAmBb,kBAnBa,0BAmBE,IAnBF,EAmBQ,KAnBR,EAmBc;AAAA;;AACvB,YAAI,kBAAkB,EAAE,KAAK,IAAL,CAAU,IAAV,CAAF,EACjB,IADiB,GAEjB,MAFiB,CAEV;AAAA,mBAAU,MAAK,IAAL,CAAU,IAAV,EAAgB,MAAhB,MAA4B,KAAtC;AAAA,SAFU,EAGjB,KAHiB,EAAtB;;AAKA,YAAG,gBAAgB,MAAhB,KAA2B,CAA9B,EACI,MAAM,IAAI,SAAJ,yBAAoC,KAAK,SAAL,CAAe,KAAK,IAAL,CAAU,IAAV,CAAf,CAApC,mBAAiF,KAAjF,CAAN;AACP,KA3BY;;;;;;;;;AAmCb,mBAnCa,2BAmCG,IAnCH,EAmCS,KAnCT,EAmCe;AACxB,YAAI,cAAc,KAAK,IAAL,CAAU,IAAV,CAAlB;AACA,YAAG,CAAC,OAAO,OAAP,CAAe,WAAf,EAA4B,KAA5B,CAAJ,EACI,MAAM,IAAI,SAAJ,eAA0B,KAAK,SAAL,CAAe,KAAf,CAA1B,gBAA0D,KAAK,SAAL,CAAe,WAAf,CAA1D,CAAN;AACP,KAvCY;;;;;;;;;AA+Cb,WA/Ca,mBA+CL,IA/CK,EA+CC,GA/CD,EA+CK;AACd,YAAG,CAAC,OAAO,QAAP,CAAgB,GAAhB,EAAqB,KAAK,IAAL,CAAU,IAAV,CAArB,CAAJ,EACI,MAAM,IAAI,SAAJ,sBAAiC,KAAK,SAAL,CAAe,GAAf,CAAjC,gBAA+D,KAAK,IAAL,CAAU,IAAV,CAA/D,CAAN;AACP,KAlDY;;;;;;;;;AA0Db,iBA1Da,yBA0DC,IA1DD,EA0DO,KA1DP,EA0Da;AACtB,YAAI,QAAQ,KAAK,IAAL,CAAU,IAAV,CAAZ;;AAEA,YAAG,QAAQ,CAAR,IAAa,SAAS,MAAM,MAA/B,EACI,MAAM,IAAI,SAAJ,wBAAmC,MAAM,MAAzC,8BAAwE,KAAK,IAAL,CAAU,IAAV,CAAxE,WAAN;AACP,KA/DY;;;;;;;;;;AAwEb,YAxEa,oBAwEJ,IAxEI,EAwEE,EAxEF,EAwEuB;AAAA,YAAjB,MAAiB,yDAAR,GAAG,IAAK;;AAChC,YAAG,CAAC,GAAG,KAAK,IAAL,CAAU,IAAV,CAAH,CAAJ,EACI,MAAM,IAAI,SAAJ,yBAAoC,MAApC,SAA8C,KAAK,IAAL,CAAU,IAAV,CAA9C,OAAN;AACP,KA3EY;;;;;;;;;AAmFb,eAnFa,uBAmFD,IAnFC,EAmFK,MAnFL,EAmFY;AACrB,YAAG,OAAO,KAAK,IAAL,CAAU,IAAV,CAAP,KAA2B,WAA3B,IAA0C,KAAK,IAAL,CAAU,IAAV,EAAgB,MAAhB,KAA2B,MAAxE,EACI,MAAM,IAAI,SAAJ,yCAAoD,MAApD,cAAmE,KAAK,IAAL,CAAU,IAAV,EAAgB,MAAnF,CAAN;AACP,KAtFY;;;;;;;;AA6Fb,UA7Fa,kBA6FN,IA7FM,EA6FD;AACR,YAAG,OAAO,KAAK,IAAL,CAAU,IAAV,CAAP,KAA2B,WAA9B,EACI,MAAM,IAAI,SAAJ,mBAA8B,IAA9B,eAAN;AACP;AAhGY,CAAjB","file":"assert.js","sourcesContent":["const _ = require('lazy.js');\nconst lodash = require('lodash');\nconst utils = require('./utils');\n\nmodule.exports = {\n\n    /**\n     * assert strict equal single value\n     * @param {string} name   key of the value to test\n     * @param {mixed}  value  comparision\n     * @throws TypeError assertion-error\n     */\n    equal(name, value){\n        if(this.vars[name] !== value)\n            throw new TypeError(`Expected ${value}, found ${this.vars[name]} at ${name}`);\n    },\n\n    /**\n     * assert deep equal each value in Object\n     * @param {string} name  key of the object to test\n     * @param {mixed} value comparision\n     * @throws TypeError assertion-error\n     */\n    allEqualObject(name, value){\n        let notEqualObjects = _(this.vars[name])\n            .keys()\n            .filter(subkey => this.vars[name][subkey] !== value)\n            .value();\n\n        if(notEqualObjects.length !== 0)\n            throw new TypeError(`Expected values in ${JSON.stringify(this.vars[name])} to all be ${value}`);\n    },\n\n    /**\n     * assert equal objects\n     * @param {string} name  key of the object to test\n     * @param {object} value comparision\n     * @throws TypeError assertion-error\n     */\n    deepEqualObject(name, value){\n        let binaryValue = this.vars[name];\n        if(!lodash.isEqual(binaryValue, value))\n            throw new TypeError(`Expected ${JSON.stringify(value)}, found ${JSON.stringify(binaryValue)}`);\n    },\n\n    /**\n     * assert array to contain item\n     * @param {string} name key of the value to test\n     * @param {array} arr   comparision\n     * @throws TypeError assertion-error\n     */\n    inArray(name, arr){\n        if(!lodash.includes(arr, this.vars[name]))\n            throw new TypeError(`Expected one of ${JSON.stringify(arr)}, found ${this.vars[name]}`);\n    },\n\n    /**\n     * assert value to be within the bounds of an array\n     * @param {string} name  key of the number to test\n     * @param {array} value comparision\n     * @throws TypeError assertion-error\n     */\n    inArrayBounds(name, value){\n        let index = this.vars[name];\n\n        if(index < 0 || index >= value.length)\n            throw new TypeError(`Expected Array of ${value.length} items to be at least ${this.vars[name]} long`);\n    },\n\n    /**\n     * assert value via callback\n     * @param {string}   name   key of the value to test\n     * @param {function} value  comparator\n     * @param {string}   fnName optional test-name\n     * @throws TypeError assertion-error\n     */\n    callback(name, fn, fnName = fn.name){\n        if(!fn(this.vars[name]))\n            throw new TypeError(`Callback failed at ${fnName}(${this.vars[name]})`);\n    },\n\n    /**\n     * assert array to be a given length\n     * @param {string}   name   key of the value to test\n     * @param {number} length comparision\n     * @throws TypeError assertion-error\n     */\n    arrayLength(name, length){\n        if(typeof this.vars[name] === 'undefined' || this.vars[name].length !== length)\n            throw new TypeError(`Expected array to have a length of ${length}, has ${this.vars[name].length}`);\n    },\n\n    /**\n     * asserts a variable exists in the first place\n     * @param {string}   name   key of the value to test\n     * @throws TypeError assertion-error\n     */\n    exists(name){\n        if(typeof this.vars[name] === 'undefined')\n            throw new TypeError(`Expected var ${name} to exist`);\n    }\n};\n"]}